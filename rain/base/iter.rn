export count_by = func(step)
  let next = 0
  return func()
    save next
    next = next + step

export count = func() -> count_by(1)

export srange_by = func(start, end, step)
  let next = start
  return func()
    if next < end
      save next
    next = next + step

export srange = func(start, end) -> srange_by(start, end, 1)

export range = func(end) -> srange_by(0, end, 1)

export map = func(iter, fn)
  return func()
    let val = iter()
    if val != null
      return fn(val)

export foldl = func(iter, fn, z)
  let a = z
  for v in iter
    a = fn(a, v)
  return a

export enum = func(iter)
  let i = 0
  return func()
    let next = iter()
    if next == null
      return

    save [i, next]
    i = i + 1

export zip = func(one, two)
  return func()
    let n1 = one()
    let n2 = two()
    if n1 == null | n2 == null
      return

    return [n1, n2]

export zip_with = func(one, two, fn)
  return func()
    let n1 = one()
    let n2 = two()
    if n1 == null | n2 == null
      return

    return fn(n1, n2)

export take = func(iter, end)
  let next = 0
  return func()
    if next < end
      save iter()
    next = next + 1

export drop = func(iter, num)
  let i = 0
  while i < num
    iter()
    i = i + 1

  return iter

export repeat = func(val)
  return func()
    return val
