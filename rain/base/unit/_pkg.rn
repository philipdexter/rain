macro init() as ()
  var block = ast.block:empty()

  AST.passed = ast.name:new(gensym())
  AST.total = ast.name:new(gensym())
  AST.collected = 0

  var int0 = ast.int:new(0)
  block:add(AST.passed:_var(int0))
  block:add(AST.total:_var(int0))

  return block

macro report() as ()
  if AST.passed == null
    return ast.error:new("Failed to initialize testing framework")

  var block = ast.block:empty()

  var pass_count = ast.rain.tostr:call([AST.passed])
  var pass_label = ast.str:new("  passed:    ")
  var pass_str = pass_label $ pass_count

  var total_count = ast.rain.tostr:call([AST.total])
  var total_label = ast.str:new("  executed:  ")
  var total_str = total_label $ total_count

  var collect_str = ast.str:new("  collected: " $ tostr(AST.collected))

  block:add(ast.rain.print:call([ast.str:new("total:")]))
  block:add(ast.rain.print:call([pass_str]))
  block:add(ast.rain.print:call([total_str]))
  block:add(ast.rain.print:call([collect_str]))

  return block

macro test(expr) as (expr)
  if AST.passed == null
    return ast.error:new("Failed to initialize testing framework")

  AST.collected = AST.collected + 1

  #var pass_str = ast.str:new("pass!")
  #var fail_str = ast.str:new("fail!")
  var int1 = ast.int:new(1)

  var pass_block = ast.block:empty()
  #pass_block:add(ast.rain.print:call([pass_str]))
  pass_block:add(AST.passed:assn(AST.passed + int1))
  pass_block:add(AST.total:assn(AST.total + int1))

  var fail_block = ast.block:empty()
  #fail_block:add(ast.rain.print:call([fail_str]))
  fail_block:add(AST.total:assn(AST.total + int1))

  return expr:_if(pass_block, fail_block)

macro group(namestr, argblock) as (label, exprs)
  if AST.passed == null
    return ast.error:new("Failed to initialize testing framework")

  save ret = ast.block:empty()

  var int1 = ast.int:new(1)

  var passed = ast.name:new(gensym())
  var total = ast.name:new(gensym())

  ret:add(passed:_var(ast.int:new(0)))
  ret:add(total:_var(ast.int:new(0)))

  var fail_block = ast.block:empty()

  var pass_block = ast.block:empty()
  pass_block:add(passed:assn(passed + int1))
  var sum = AST.passed:add(int1)
  var assn = AST.passed:assn(sum)
  pass_block:add(assn)

  for expr in exprs:values()
    AST.collected = AST.collected + 1
    ret:add(expr:_if(pass_block, fail_block))
    ret:add(total:assn(total + int1))
    ret:add(AST.total:assn(AST.total + int1))

  var report_label = ast.str:new(label $ ":")

  var pass_count = ast.rain.tostr:call([passed])
  var pass_label = ast.str:new("  passed:    ")
  var pass_str = pass_label $ pass_count

  var total_count = ast.rain.tostr:call([total])
  var total_label = ast.str:new("  executed:  ")
  var total_str = total_label $ total_count

  ret:add(ast.rain.print:call([report_label]))
  ret:add(ast.rain.print:call([pass_str]))
  ret:add(ast.rain.print:call([total_str]))
